#include <iostream>
#include <fstream>
using namespace std;
//Автор: Моисеенко Сергей ИФСТ-15 Дата: 05.05.2022

struct rle{//Структура для сжатия и возвращения битов
    int mas1[200];//Массив для битов
    int mas2[200];//Массив для количества битов
    int mas3[200];//Массив для возвращённых битов
};

void fundecompressor(fstream &file, rle *arr2, int &k){//Функция возвращения исходного файла
	file.open("res.txt",ios::app);//Открытие файла для записи
	int n=0;//Количество возвращённых битов
	for (int i=0;i<k;i++){//Цикл для возвращения изначальных битов
		while(arr2->mas2[i]>0){//Цикл вывода битов
			file<<arr2->mas1[i];//Вывод бита
			arr2->mas3[n]=arr2->mas1[i];//Вывод бита
			arr2->mas2[i]--;//Уменьшение количества битов
			n++;//Увеличение количества возвращённых битов
		}
	}
	file.close();//Закрытие файла
}
void funcompressor(fstream &file,int &b, rle *arr2, int &k){//Функция сжатия исходного файла
	file.open("data.txt",ios::in);//Открытие исходного файла
	char c;//Символ файла
	int c1;//Следующая цифра в массиве
	int arr3[b+1];//Массив с битами
	arr3[b+1]=2;//Значение конца массива для завершения сравнения
	int t=0;//Счётчик одинаковых битов
	for (int i=0;i<b;i++){//Цикл заполнения массива с битами
		file.get(c);//Чтение символа из файла
		arr3[i]=(int)c-48;//Перевод в целое число из символа
	}
	file.close();//Закрытие файла
	for (int i=0;i<b;i++){//Цикл сжатия
		c1=arr3[i+1];//Следующая цифра в массиве
		if (arr3[i]==c1){//Условие для увеличения количества того же бита
			arr2->mas1[k]=arr3[i];//Сохранение самого бита
			t++;//Увеличение количества битов
			arr2->mas2[k]=t;//Сохрание количества битов
		}
		else{//Условие для сдвига к непохожему биту
			arr2->mas1[k]=arr3[i];//Сохранение самого бита
			t++;//Увеличение количества битов
			arr2->mas2[k]=t;//Сохрание количества битов
			t=0;//Обнуление 
			k++;//Увеличение сдвига
		}
	}
	file.open("res.txt",ios::out);//Открытие файла для записи
	if (file){//Условие для включённого файла
		for (int i=0;i<k;i++){//Цикл заполнения файла
			file<<arr2->mas1[i];//Запись в файл бит
			file<<arr2->mas2[i];//Запись в файл количество бит
		}
	}
	file<<'\n';
	file.close();//Закрытие файла
	
}

void funfilling(fstream &file,int &b,int *arr){//Функция заполнения файла двоичным кодом
	file.open("data.txt",ios::out);//Открытие файла с битами
	int s;//Десятичное число
	int r=7;//Сдвиг в массиве
	int arr1[8];//Массив для байта
	if (file){//Условие для включённого файла
		for (int i=0;i<20;i++){//Цикл заполнения массива случайными битами
			s=arr[i];//Новое десятичное число
			while (r!=-1){//Цикл перевода в двоичную систему
				if (s>0){//Условие для заполнения непустых битов
					arr1[r]=s%2;//Сохранение остатка
					s/=2;//Переход к следующему биту
				}
				else{//Условие для пустых битов
					arr1[r]=0;//Запись нуля
				}
				r--;//Сдвиг в массиве
				b++;//Увеличение числа битов
			}
			r=7;//Обновление сдвига
			for (int i=0;i<8;i++){//Цикл записи в файл двоичного кода
				file<<arr1[i];//Запись бита в файл
			}
		}
	}
	file.close();//Закрытие файла
}

int main()
{
	setlocale( LC_ALL, "Russian");
	fstream file;//Создание заголовочного файла
	int b=0;//Счётчик битов
	int k=0;//Сдвиг в структуре
	rle *arr2=new rle[1];//Структура для сжатия и возвращения битов
	int arr[20]={25,25,12,12,12,1,9,9,9,9,9,9,0,0,2,2,2,1,2,3};//Случайная последовательность байтов в десятичном виде
	funfilling(file,b,arr);//Функция заполнения файла двоичным кодом
	funcompressor(file,b,arr2,k);//Функция сжатия исходного файла
	cout<<"Сжатые биты:"<<"\n";
	for (int i=0;i<k;i++){//Цикл вывода сжатых битов
		cout<<arr2->mas1[i]<<arr2->mas2[i]<<' ';//Вывод сжатых битов
	}
	fundecompressor(file,arr2,k);//Функция возвращения исходного файла
	cout<<"\n"<<"Возвращённые биты:"<<"\n";
	for (int i=0;i<b;i++){//Цикл вывода возвращённых битов
		cout<<arr2->mas3[i];//Вывод возвращённых битов
	}
}